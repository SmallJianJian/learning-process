<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <!--被继承的父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 version。-->
  <parent>
    <!--父工程的组织标识符-->
    <groupId>org.springframework.boot</groupId>
    <!--父工程的构建标识符-->
    <artifactId>spring-boot-starter-parent</artifactId>
    <!--父工程的版本-->
    <version>2.0.0.RELEASE</version>
    <!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。
    Maven首先在构建当前项目的地方寻找父项目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。-->
    <relativePath/>
  </parent>

  <!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，
  虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。-->
  <modelVersion>4.0.0</modelVersion>
  <!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。
  并且构建时生成的路径也是由此生成， 如com.chenj生成的相对路径为：/com/chenj-->
  <groupId>com.chenj</groupId>
  <!-- 构件的标识符，它和group ID一起唯一标识一个构件。
  换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 特定的group ID下，artifact ID也必须是唯一的。
  构件是项目产生的或使用的一个东西，Maven为项目产生的构件(打包类型)包括：JARs，源码，二进制发布和WARs等。-->
  <artifactId>maven-test</artifactId>
  <!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型-->
  <packaging>war</packaging>
  <!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号-->
  <version>1.0-SNAPSHOT</version>
  <!--项目的名称, Maven产生的文档用-->
  <name>maven-test</name>
  <!--项目主页的URL, Maven产生的文档用-->
  <url>http://maven.apache.org</url>
  <!-- 项目的详细描述, Maven 产生的文档用-->
  <description>A maven project to study maven.</description>

  <!--描述了这个项目构建环境中的前提条件。-->
  <prerequisites>
    <!--构建该项目或使用该插件所需要的Maven的最低版本-->
    <maven></maven>
  </prerequisites>

  <!--项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira-->
  <issueManagement>
    <!--问题管理系统（例如jira）的名字，-->
    <system>jira</system>
    <!--该项目使用的问题管理系统的URL-->
    <url>http://jira.baidu.com/banseon</url>
  </issueManagement>

  <!--项目持续集成信息-->
  <ciManagement>
    <!--持续集成系统的名字，例如continuum-->
    <system></system>
    <!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。-->
    <url></url>
    <!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告）-->
    <notifiers>
      <!--配置一种方式，当构建中断时，以该方式通知用户/开发者-->
      <notifier>
        <!--传送通知的途径-->
        <type></type>
        <!--发生错误时是否通知-->
        <sendOnError>true</sendOnError>
        <!--发生失败时是否通知-->
        <sendOnFailure>false</sendOnFailure>
        <!--发生成功时是否通知-->
        <sendOnSuccess>false</sendOnSuccess>
        <!--发生警告时是否通知-->
        <sendOnWarning>false</sendOnWarning>
        <!--通知发送到哪里-->
        <address></address>
        <!--扩展配置项-->
        <configuration/>
      </notifier>
    </notifiers>
  </ciManagement>

  <!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。-->
  <inceptionYear></inceptionYear>
  <!--项目相关邮件列表信息-->
  <mailingLists>
    <!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息-->
    <mailingList>
      <!--邮件的名称-->
      <name>Demo</name>
      <!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建-->
      <post>544571308@qq.com</post>
      <!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建-->
      <subscribe>544571308@qq.com</subscribe>
      <!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建-->
      <unsubscribe>544571308@qq.com</unsubscribe>
      <!--你可以浏览邮件信息的URL-->
      <archive></archive>
    </mailingList>
  </mailingLists>

  <!--项目开发者列表-->
  <developers>
    <!--某个项目开发者的信息-->
    <developer>
      <!--SCM里项目开发者的唯一标识符-->
      <id>HELLO MAVEN</id>
      <!--项目开发者的全名-->
      <name>JiuZhang</name>
      <!--项目开发者的email-->
      <email>chen7870098@163.com</email>
      <!--项目开发者的主页的URL-->
      <url></url>
      <!--项目开发者在项目中扮演的角色，角色元素描述了各种角色-->
      <roles>
        <role>Architect</role>
      </roles>
      <!--项目开发者所属组织-->
      <organization>com.maidao</organization>
      <!--项目开发者所属组织的URL-->
      <organizationUrl></organizationUrl>
      <!--项目开发者属性，如即时消息如何处理等-->
      <properties>
        <dept>No</dept>
      </properties>
      <!--项目开发者所在时区， -11到12范围内的整数。-->
      <timezone>8</timezone>
    </developer>
  </developers>

  <!--项目的其他贡献者列表-->
  <contributors>
    <!--项目的其他贡献者。参见developers/developer元素-->
    <contributor></contributor>
  </contributors>

  <!--该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。
  如果列出多个license，用户可以选择它们中的一个而不是接受所有license。-->
  <licenses>
    <!--描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。-->
    <license>
      <!--license用于法律上的名称-->
      <name>Apache 2</name>
      <!--官方的license正文页面的URL-->
      <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
      <!--项目分发的主要方式：
          repo，可以从Maven库下载
          manual， 用户必须手动下载和安装依赖-->
      <distribution>repo</distribution>
      <!--关于license的补充信息-->
      <comments>A business-friendly OSS license</comments>
    </license>
  </licenses>

  <!--Source Control Management,允许你配置你的代码库，供Maven站点以及其他插件使用-->
  <scm>
    <!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。-->
    <connection>scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)</connection>
    <!--给开发者使用的，类似connection元素。即该连接不仅仅只读-->
    <developerConnection>scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk</developerConnection>
    <!--当前代码的标签，在开发阶段默认为HEAD-->
    <tag>HEAD</tag>
    <!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。-->
    <url>http://svn.baidu.com/banseon</url>
  </scm>

  <!--描述项目的各种组织属性-->
  <organization>
    <!--组织名称-->
    <name>maidao</name>
    <!--组织url-->
    <url>http://www.baidu.com/</url>
  </organization>

  <properties>
    <skipTests>true</skipTests>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <!--构建项目需要的信息-->
  <build>
    <!--产生的构件的文件名，默认值是${artifactId}-${version}。-->
    <finalName>maven-test</finalName>
    <!--该元素设置了项目源码目录，默认值"src/main/java"当构建项目时候，构建系统会编译目录里的源码，该路径是相对于pom.xml文件的路径-->
    <sourceDirectory>src/main/java</sourceDirectory>
    <!--该元素设置了项目脚本源码目录，默认值"src/main/scripts"该目录与源码目录不同：绝大多数情况下，该目录下的内容，会被拷贝到输出目录（因为脚本是被解释的，而非编译）-->
    <scriptSourceDirectory>src/main/scripts</scriptSourceDirectory>
    <!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。-->
    <testSourceDirectory>src/main/test</testSourceDirectory>
    <!--被编译过的应用程序class文件存放的目录，默认值target/classes。-->
    <outputDirectory>target/classes</outputDirectory>
    <!--被编译过的单元测试用例class文件存放的目录，默认值target/test-classes。-->
    <testOutputDirectory>target/test-classes</testOutputDirectory>
    <!--一系列build过程中需要被激活的构建-->
    <extensions>
      <!--描述使用到的构建扩展。-->
      <extension>
        <!--构建扩展的groupId-->
        <groupId>org.apache.maven.wagon</groupId>
        <!--构建扩展的artifactId-->
        <artifactId>wagon-ftp</artifactId>
        <!--构建扩展的版本-->
        <version>1.0-alpha-3</version>
      </extension>
    </extensions>
    <!--当项目没有规定目标（Maven2 叫做阶段）时的默认值,
    例子：eclipse安装的maven插件是m2eclipse，当使用命令行时就已经指定了phase，所以一切正常；而当而使用m2eclipse的【Run As】-【Maven build】时并未为其指定goal或phase，所以会报错-->
    <defaultGoal>compile</defaultGoal>
    <!--这个元素描述了所有项目相关的资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终打包的文件里-->
    <resources>
      <!--这个元素描述了项目相关或测试相关的所有资源路径-->
      <resource>
        <!-- 描述了资源的目标路径。该路径相对target/classes目录(默认值/)（例如${project.build.outputDirectory}）。
        例子:如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven/messages。
        然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。-->
        <targetPath>target/classes</targetPath>
        <!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出的/*.property文件。-->
        <filtering>false</filtering>
        <!--描述存放资源的目录，该路径相对pom.xml路径-->
        <directory>src/main/java</directory>
        <!--包含的模式列表，例如**/*.xml.-->
        <includes>
          <include>**/*.xml</include>
        </includes>
        <!--排除的模式列表，例如**/*.xml-->
        <excludes>
          <exclude></exclude>
        </excludes>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*</include>
        </includes>
      </resource>
    </resources>
    <!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。-->
    <testResources>
      <!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明-->
      <testResource></testResource>
    </testResources>
    <!--构建产生的所有文件存放的目录，默认值target-->
    <directory>target</directory>

    <!--使用的插件列表,参见pluginManagement-->
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <mainClass>com.chenj.Application</mainClass>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
    <!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。
    给定插件的任何本地配置都会覆盖这里的配置-->
    <pluginManagement>
        <!--使用的插件列表 。-->
        <plugins>
            <!--plugin元素包含描述插件所需要的信息。-->
            <plugin>
              <!--插件在仓库里的group ID-->
              <groupId>groupId</groupId>
              <!--插件在仓库里的artifact ID-->
              <artifactId>artifactId</artifactId>
              <!--被使用的插件的版本（或版本范围）-->
              <version>version</version>
              <!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。-->
              <executions>
                <!--execution元素包含了插件执行需要的信息-->
                <execution>
                  <!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标-->
                  <id>id</id>
                  <!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段-->
                  <phase>phase</phase>
                  <!--配置的执行目标-->
                  <goals>
                    <goal>goal</goal>
                  </goals>
                  <!--配置是否被传播到子POM-->
                  <inherited>true</inherited>
                  <!--作为DOM对象的配置-->
                  <configuration></configuration>
                </execution>
              </executions>
              <!--附加依赖项,这个项目需要介绍插件的类加载器,参见dependencies/dependency元素-->
              <dependencies></dependencies>
            </plugin>
        </plugins>
    </pluginManagement>
  </build>
</project>
