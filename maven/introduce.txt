一.定义Maven:
Maven是一个项目管理工具（插件包集合），它包含了一个项目对象模型 (POM：Project Object Model)，一组标准集合，一个项目生命周期(Project Lifecycle)，
一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。
简单的说，Maven将一个项目进行对象化，然后在其pom.xml文件中进行各种配置，从而完成在其生命周期内的打包等各种逻辑.
另外，Maven能够有效率的管理各种jar包，并且在pom文件中配置后，使用jar包时去会自动从库中下载，而不需要我们到处去一个一个寻找jar包，然后一个一个的添加jar包，提高了开发效率

二：为什么要有Maven:
每个Java项目的目录结构都没有一个统一的标准，配置文件到处都是，单元测试代码到底应该放在那里也没有一个权威的规范。
因此，我们就要用到Maven,一个项目管理工具。

三：Maven干了什么：
1 依赖的管理：仅仅通过jar包的几个属性，就能确定唯一的jar包，在指定的文件pom.xml中，只要写入这些依赖属性，就会自动下载并管理jar包。
2 项目的构建：内置很多的插件与生命周期，支持多种任务，比如校验、编译、测试、打包、部署、发布...（统一开发规范与工具）
3 项目的知识管理：管理项目相关的其他内容，比如开发者信息，版本等等

四：如果没有Maven会怎么样：
1 如果使用了spring，去spring的官网下载jar包；如果使用hibernate，去hibernate的官网下载Jar包；如果使用Log4j，去log4j的官网下载jar包.....
2 当某些jar包有依赖的时候，还要去下载对应的依赖jar包
3 当jar包依赖有冲突时，不得不一个一个的排查
4 执行构建时，需要使用ant写出很多重复的任务代码
5 当新人加入开发时，需要拷贝大量的jar包，然后重复进行构建
6 当进行测试时，需要一个一个的运行....检查

五：Maven 本地仓库，远程仓库，中央仓库，Nexus私服，镜像 详解
https://blog.csdn.net/molashaonian/article/details/73198565

maven查找jar包顺序：本地仓库本机）-->私服（局域网）-->中央仓库（外部网络）-->其他远程仓库（外部网络）

1. 本地仓库：
    本地仓库是远程仓库的一个缓冲和子集，当你构建Maven项目的时候，首先会从本地仓库查找资源，如果没有，那么Maven会从远程仓库下载到你本地仓库
    Maven缺省的本地仓库地址为${user.home}/.m2/repository 。也就是说，一个用户会对应的拥有一个本地仓库
    你可以通过修改${user.home}/.m2/settings.xml 配置这个地址：<localRepository> E:/repository/maven/repos</localRepository>

2.远程仓库
  除本地仓库以外的仓库都叫做远程仓库
  远程仓库配置在： 
             <profiles>
               <profile>  
                  <id></id>  
                     <repositories> 
                       <repository>远程仓库配置</repository> 
                     </repositories> 
                   </profile>
              </profiles> 

3. 中央仓库
    中央仓库也属于远程仓库的一种，特征就是 <id>central</id>，id名为 central
    Maven的安装目录中，在lib目录下，maven-model-builder-3.1.0.jar中，有一个默认的pom.xml文件
    其中就配置了Maven默认连接的中心仓库
    Maven的中央仓库地址默认是：https://repo.maven.apache.org/maven2/,可以通过修改settings.xml文件来覆盖默认的中央仓库地址

4. Nexus私服
    私服也属于远程仓库的一种，只是这个远程仓库的地址是本地服务器而已
    配置在局域网环境中，为局域网中所有开发人员提供jar包的统一管理
    私服的Repository配置
    在setting.xml中加入私服的配置，让Maven从私服下载jar包，而不直接去远程仓库下载。
    默认情况下，Maven下载jar包将直接连接到外网http://repo1.maven.org/maven2/去下载；
    安装私服之后，让Maven下载jar包先从私服查找，如果没有，再从外网下载并保存在私服上
    在POM在加入下面的配置，其中url为NEXUS私服的Public Repository对外的地址
    <settings>
      ...
      <profiles>
         <profile>
          <id>profile-nexus</id>
          <!-- 配置私服地址 -->
          <repositories>
            <repository>
              <id>nexus</id>
              <url>http://localhost:8081/nexus/content/groups/public/</url>
              <snapshots><enabled>true</enabled></snapshots>
              <releases><enabled>true</enabled></releases>
            </repository>
          </repositories>
          <pluginRepositories>
            <pluginRepository>
              <id>nexus</id>
              <url>http://localhost:8081/nexus/content/groups/public/</url>
              <snapshots><enabled>true</enabled></snapshots>
              <releases><enabled>true</enabled></releases>
            </pluginRepository>
          </pluginRepositories>
        </profile>
      </profiles>
      ...
    <settings>
     
    然后，使用<activeProfiles>对上面的配置进行激活（通过配置的id标识进行激活）
    <activeProfiles>
        <activeProfile>profile-nexus</activeProfile>
    </activeProfiles>

6. 镜像
    Maven的镜像是指如果仓库X可以提供仓库Y存储的所有内容，那么就可以认为X是Y的一个镜像。
    也就是说任何一个可以从仓库Y获得的依赖，都能够从它的镜像中获取。
    比如阿里的Maven仓库http://maven.aliyun.com/nexus/content/groups/public就可以理解为是中央仓库https://repo.maven.apache.org/maven2/在中国的镜像
    mirror则相当于一个代理，它会拦截去指定的远程repository下载构件的请求，然后从自己这里找出构件回送给客户端。配置mirror的目的一般是出于网速考虑。
    要为一个仓库配置镜像只需要修改settings.xml文件，如下:
        <mirror>
          <id>central-repository-mirror</id>
          <name>Central Repository Mirror</name>
          <mirrorOf>central</mirrorOf>
          <url>http://maven.aliyun.com/nexus/content/groups/public</url>
        </mirror>
    其中的mirrorOf标签值就是仓库的id标签值，中央仓库就是默认就是central，表示这是为中央仓库配置的镜像，以后本来从原始中央仓库下载的依赖下载都会从这个镜像中进行下载。

    高级的镜像配置： 
    1.<mirrorOf>*</mirrorOf> 
    匹配所有远程仓库。这样所有pom中定义的仓库都不生效
    2.<mirrorOf>external:*</mirrorOf> 
    匹配所有远程仓库，使用localhost的除外，使用file://协议的除外。也就是说，匹配所有不在本机上的远程仓库。 
    3.<mirrorOf>repo1,repo2</mirrorOf> 
    匹配仓库repo1和repo2，使用逗号分隔多个远程仓库。 
    4.<mirrorOf>*,!repo1</miiroOf> 
    匹配所有远程仓库，repo1除外，使用感叹号将仓库从匹配中排除。

    注意点：1.mirror不是按settings.xml中写的那样的顺序来查询的；
           2.第一个mirror中不存在a.jar的时候，并不会去第二个mirror中查找，除非第一个mirror无法连接