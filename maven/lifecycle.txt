一、什么是Maven生命周期：
1.开发项目的时候，项目不断地重复编译、测试、打包、部署等阶段，maven的生命周期就是对所有构建阶段抽象与统一，他们是由一个个不同的插件组成的。生命周期包含项目的清理、初始化、编译、测试、打包、集成测试、验证、部署、站点生成等几乎所有的阶段。
2.Maven 有三套内置的相互独立的生命周期：
1）CleanLifecycle 在进行真正的构建之前进行一些清理工作。
2）DefaultLifecycle 构建的核心部分，编译，测试，打包，部署等等。
3）SiteLifecycle 生成项目报告，站点，发布站点。
3.生命周期本身相互独立，且是由阶段组成的，且唯一属于某个生命周期：用户可以仅仅调用生命周期的某一个阶段，也就是说用户调用了default 周期的任何阶段，并不会触发clean 周期以及site 周期的任何事情。

二、 不同的生命周期的阶段：
1.清洁（clean）生命周期
预清洁（pre-clean）  执行实际项目清理之前所需的流程
清洁（clean） clean:clean 删除以前构建生成的所有文件
后清洁（post-clean）  执行完成项目清理所需的流程
2.默认（default）生命周期
验证（validate）  验证项目是正确的，所有必要的信息可用。
初始化（initialize）  初始化构建状态，例如设置属性或创建目录。
产生来源（generate-sources）  生成包含在编译中的任何源代码。
流程源（process-sources）  处理源代码，例如过滤任何值。
生成资源（generate-resources） ear:generate-application-xml（打包ear）plugin:descriptor（打包maven-plugin） 生成包含在包中的资源。
流程资源（process-resources） resources:resources 将资源复制并处理到目标目录中，准备打包。
编译（compile） compiler:compile 编译项目的源代码。
工艺类（process-classes）  从编译后处理生成的文件，例如对Java类进行字节码增强。
生成测试来源（generate-test-sources）  生成包含在编译中的任何测试源代码。
流程测试来源（process-test-sources） resources:testResources 处理测试源代码，例如过滤任何值。
生成测试资源（generate-test-resources）  创建测试资源。
流程测试资源（process-test-resources）  将资源复制并处理到测试目标目录中。
测试编译（test-compile） compiler:testCompile 将测试源代码编译到测试目标目录中
流程检验类（process-test-classes）  从测试编译中处理生成的文件，例如对Java类进行字节码增强。对于Maven 2.0.5及以上版本。
测试（test） surefire:test 使用合适的单元测试框架运行测试。这些测试不应该要求代码被打包或部署。
制备包（prepare-package）  在实际包装之前，执行必要的准备包装的操作。这通常会导致打包的处理版本的包。（Maven 2.1及以上）
打包（package） ejb:ejb or ejb3:ejb3 or jar:jar or par:par or rar:rar or war:war（打包ejb/ejb3/jar/par/rar/war）；ear:ear（打包ear）；jar:jar and plugin:addPluginArtifactMetadata（打包maven-plugin） 采取编译的代码，并以其可分发的格式（如JAR）进行打包。
预集成测试（pre-integration-test）  在执行集成测试之前执行所需的操作。这可能涉及诸如设置所需环境等。
集成测试（integration-test）  如果需要，可以将该包过程并部署到可以运行集成测试的环境中。
整合后的测试（post-integration-test）  执行集成测试后执行所需的操作。这可能包括清理环境。
校验（verify）  运行任何检查以验证包装是否有效并符合质量标准。
安装（install） install:install 将软件包安装到本地存储库中，以作为本地其他项目的依赖关系。
部署（deploy） deploy:deploy 在集成或发布环境中完成，将最终软件包复制到远程存储库，以与其他开发人员和项目共享。
3.站点（site）生命周期
预网站（pre-site）  在实际的项目现场生成之前执行所需的进程
网站（site） site:site 生成项目的站点文档
后网站（post-site）  执行完成站点生成所需的进程，并准备站点部署
网站部署（site-deploy） site:deploy 将生成的站点文档部署到指定的Web服务器

三、 生命周期阶段在命令行中的调用
在开发环境中，使用以下调用构建并将工件安装到本地存储库中。
mvn install
注意：在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行。
此命令在执行安装之前按顺序（验证（validate），编译（compile），打包（package）等）执行每个默认生命周期阶段。在这种情况下，您只需要调用最后一个构建阶段来执行，安装（install）。
在构建环境中，使用以下调用将工件清理地构建并部署到共享存储库中。
mvn clean deploy
相同的命令可以在多模块场景（即具有一个或多个子项目的项目）中使用。Maven遍历每个子项目并执行清洁（clean），然后执行部署（deploy）（包括所有之前的构建阶段步骤）。
注意：在我们开发阶段，有一些生命周期的阶段，比如验证（validate）这些，基本很少用到。只要使用关键的几个基本能满足需求。

四：阶段（Phase ）与目标(goal )的关系:
阶段代表构建生命周期中的特定步骤
插件目标代表一个特定的任务(比构建阶段更好)，它有助于项目的构建和管理。
阶段是通过声明那些构建阶段的目标来实现的。
因此可以这样理解phase与goal的关系：
1.phase其实就是goal的容器。phase被执行时，实际执行的都是被绑定到该phase的goal；如果一个phase没有绑定goal，那这个phase就不会被执行。
2.一个goal是独立的，它可以被绑定到多个phase中去，也可以一个phase都没有。如果一个goal没有被绑定到任何一个lifecycle，它仍然可以直接被调用，而不是被lifecycle调用
3.goal与goal之间是独立的。因此单独执行一个goal不会导致其他goal被执行

阶段和目标在mvn命令中执行顺序取决于调用目标和构建阶段的顺序。例如，考虑下面的命令。
mvn clean[phase] dependenc[plugin]y:copy-dependencies[goal] package
该清洁（clean）和打包（package）是建立阶段，而dependency:copy-dependencies是（一个插件）的目标。
如果要执行此操作，则将首先执行清洁（clean）阶段（意味着它将运行清洁生命周期的所有先前阶段以及清洁（clean）阶段本身），然后执行dependency:copy-dependencies目标，然后才能最终执行打包（package）阶段（以及默认生命周期的所有之前的构建阶段）。


五、什么是maven插件
1.插件是为Maven提供目标的工件。一个插件可能带有一个或多个目标，其中每个目标表示该插件的功能。
例如，编译器（compiler）插件有两个目标：compile和testCompile。前者编译主代码的源代码，后者编译测试代码的源代码。
2.使用插件，就是连同要执行的goal，加到对应的Phase的phase中去。一般插件内置了默认生命周期阶段，无需自己手动配置这些阶段
